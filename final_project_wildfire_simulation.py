# -*- coding: utf-8 -*-
"""Final Project - WildFire Simulation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hIt6hHIiHF0l7vB1wKPfp0phBvE5BTvt
"""

import numpy as np
from pandas import DataFrame
import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.art3d as art3d
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import style
from itertools import product
from random import sample
import random
import math
from matplotlib.patches import Circle
from matplotlib import animation
from matplotlib import colors
import imageio
import seaborn as sns
import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.art3d as art3d
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import style
from itertools import product
from random import sample
import random
import math
from matplotlib.patches import Circle

"""Class Tree"""

class tree:
  def __init__(self,x=0,y=0,fpindex=0,dia=0,cse=0,cst=0,burning=1,r=0,Color=0):#fpindex:firespreadingindex;cse:carbon Sequestration;cst:carbonStorage;dia:diameter of the tree;r=dia/2;burning is the burning statement
    self.x = x
    self.y = y
    self.fpindex =fpindex
    self.dia = dia
    self.r=self.dia/2
    self.cse = cse
    self.cst = cst
    self.burning=burning
    self.Color=Color
  def changeburning(self,burning):
    self.burning=burning

class spruce_spp(tree):
  def __init__(self,x=0,y=0,fpindex=0,dia=0,cse=0,cst=0,burning=1,r=0,Color='g'):
    super().__init__(x,y,fpindex,dia,cse,cst,burning,r,Color)
    self.procatch = (fpindex/200)
    self.x = x
    self.y = y
    self.Color=Color
  def calcstcse(self,ye):
    if ye==1:
      self.dia=2
      self.cst=21.736*self.dia**2.1659
      self.cse=-0.241343187321718 + 18.463820372798*self.dia - 9.93573893919696*self.dia**2 + 3.70090107930145*self.dia**3 - 0.660546601589178*self.dia**4 + 0.0674683875936792*self.dia**5 - 0.00420750486408542*self.dia**6 + 0.000162902156877489*self.dia**7 - 3.81981787169743E-06*self.dia**8 + 4.96538750115E-08*self.dia**9 - 2.7448698985846E-10*self.dia**10
    elif ye>1 and ye<=43:
      self.dia=2+(ye-1)*0.9
      self.cst=21.736*self.dia**2.1659
      self.cse=-0.241343187321718 + 18.463820372798*self.dia - 9.93573893919696*self.dia**2 + 3.70090107930145*self.dia**3 - 0.660546601589178*self.dia**4 + 0.0674683875936792*self.dia**5 - 0.00420750486408542*self.dia**6 + 0.000162902156877489*self.dia**7 - 3.81981787169743E-06*self.dia**8 + 4.96538750115E-08*self.dia**9 - 2.7448698985846E-10*self.dia**10
    elif ye>43 and ye<61:
      self.dia=39.8+(ye-43)*0.9
      self.cst=21.736*self.dia**2.1659
      self.cse=391.835111111109 - 6.95633333333329*self.dia
    elif ye==61:
      self.dia=2
      self.cst=21.736*self.dia**2.1659
      self.cse=-0.241343187321718 + 18.463820372798*self.dia - 9.93573893919696*self.dia**2 + 3.70090107930145*self.dia**3 - 0.660546601589178*self.dia**4 + 0.0674683875936792*self.dia**5 - 0.00420750486408542*self.dia**6 + 0.000162902156877489*self.dia**7 - 3.81981787169743E-06*self.dia**8 + 4.96538750115E-08*self.dia**9 - 2.7448698985846E-10*self.dia**10
    elif ye>61 and ye<=101:
      self.dia=2+(ye-1-60)*0.9
      self.cst=21.736*self.dia**2.1659
      self.cse=-0.241343187321718 + 18.463820372798*self.dia
      - 9.93573893919696*self.dia**2 + 3.70090107930145*self.dia**3 - 0.660546601589178*self.dia**4
      + 0.0674683875936792*self.dia**5 - 0.00420750486408542*self.dia**6 + 0.000162902156877489*self.dia**7
      - 3.81981787169743E-06*self.dia**8 + 4.96538750115E-08*self.dia**9 - 2.7448698985846E-10*self.dia**10
    self.r=self.dia/2

class red_maple(tree):
  def __init__(self,x=0,y=0,fpindex=7,dia=0,cse=0,cst=0,burning=1,r=0,Color='r'):
    super().__init__(x,y,fpindex,dia,cse,cst,burning,r)
    self.procatch = (fpindex/200)
    self.x = x
    self.y = y
    self.fpindex=7
    self.Color='r'
  def calcstcse(self,ye):
    if ye==1:
      self.dia=2
      self.cst=5.8772*self.dia**2.4044
      self.cse=-1.34948533898461 + 19.1625329389677*self.dia - 9.67846808776195*self.dia**2 + 2.52829891127587*self.dia**3 - 0.319420363138025*self.dia**4 + 0.0231083807610896*self.dia**5 - 0.00101879110890968*self.dia**6 + 2.78212052310514E-05*self.dia**7 -4.58787891210856E-07*self.dia**8 + 4.17672901651896E-09*self.dia**9 - 1.60840916447552E-11*self.dia**10
    elif ye>1 and ye<=100:
      self.dia=2+(ye-1)*0.56
      self.cst=5.8772*self.dia**2.4044
      self.cse=-1.34948533898461 + 19.1625329389677*self.dia - 9.67846808776195*self.dia**2 + 2.52829891127587*self.dia**3 - 0.319420363138025*self.dia**4 + 0.0231083807610896*self.dia**5 - 0.00101879110890968*self.dia**6 + 2.78212052310514E-05*self.dia**7 -4.58787891210856E-07*self.dia**8 + 4.17672901651896E-09*self.dia**9 - 1.60840916447552E-11*self.dia**10
    self.r=self.dia/2

class eastern_cottonwood(tree):
  def __init__(self,x=0,y=0,fpindex=0,dia=0,cse=0,cst=0,burning=1,r=0,Color='y'):
    super().__init__(x,y,fpindex,dia,cse,cst,burning,r)
    self.procatch = (fpindex/200)
    self.x = x
    self.y = y
    self.Color='y'
  def calcstcse(self,ye):
    if ye==1:
      self.dia=2
      self.cst=4.0519*self.dia**2.4838
      self.cse=-1.83186244125028 + 24.0126941196306*self.dia + -13.7000339833659*self.dia**2 + 3.52417852384945*self.dia**3 - 0.44359745038467*self.dia**4 + 0.0319686558680373*self.dia**5 - 0.00140213324433745*self.dia**6 + 3.80341662747805E-05*self.dia**7 - 6.22195173325272E-07*self.dia**8 + 5.61441356155492E-09*self.dia**9 - 2.14236038839293E-11*self.dia**10
    elif ye>1 and ye<=101:
      self.dia=2+(ye-1)*0.53
      self.cst=4.0519*self.dia**2.4838
      self.cse=-1.83186244125028 + 24.0126941196306*self.dia + -13.7000339833659*self.dia**2 + 3.52417852384945*self.dia**3 - 0.44359745038467*self.dia**4 + 0.0319686558680373*self.dia**5 - 0.00140213324433745*self.dia**6 + 3.80341662747805E-05*self.dia**7 - 6.22195173325272E-07*self.dia**8 + 5.61441356155492E-09*self.dia**9 - 2.14236038839293E-11*self.dia**10
    self.r=self.dia/2

class american_elm(tree):
  def __init__(self,x=0,y=0,fpindex=0,dia=0,cse=0,cst=0,burning=1,r=0,Color='m'):
    super().__init__(x,y,fpindex,dia,cse,cst,burning,r)
    self.procatch = (fpindex/200)
    self.x = x
    self.y = y
    self.Color='m'
  def calcstcse(self,ye):
    if ye==1:
      self.dia=2
      self.cst=4.2372*self.dia**2.395
      self.cse=-1.15682997930082 + 8.68709137834373*self.dia - 2.59629456147552*self.dia**2 + 0.536825715819292*self.dia**3 - 0.0484295278580772*self.dia**4 + 0.00234036105562816*self.dia**5 - 6.37288907611027E-05*self.dia**6 + 9.69094688196246E-07*self.dia**7 - 7.60513473522824E-09*self.dia**8 + 2.3641101323689E-11*self.dia**9
    elif ye>1 and ye<=175:
      self.dia=2+(ye-1)*0.32
      self.cst=4.2372*self.dia**2.395
      self.cse=-1.15682997930082 + 8.68709137834373*self.dia - 2.59629456147552*self.dia**2 + 0.536825715819292*self.dia**3 - 0.0484295278580772*self.dia**4 + 0.00234036105562816*self.dia**5 - 6.37288907611027E-05*self.dia**6 + 9.69094688196246E-07*self.dia**7 - 7.60513473522824E-09*self.dia**8 + 2.3641101323689E-11*self.dia**9
    self.r=self.dia/2

class silver_maple(tree):
  def __init__(self,x=0,y=0,fpindex=0,dia=0,cse=0,cst=0,burning=1,r=0,Color='c'):
    super().__init__(x,y,fpindex,dia,cse,cst,burning,r)
    self.procatch = (fpindex/200)
    self.x = x
    self.y = y
    self.Color='c'
  def calcstcse(self,ye):
    if ye==1:
      self.dia=1
      self.cst=12.432*self.dia**2.0873
      self.cse=1.33521505975585 + 2.91436142467325*self.dia + 1.22482805681945*self.dia**2 - 0.128307442358041*self.dia**3 + 0.00621187374490005*self.dia**4 - 0.000136741754115665*self.dia**5 + 1.06726936205626E-06*self.dia**6 + 2.89107251476029E-09*self.dia**7 - 5.31681726060057E-11*self.dia**8
    elif ye>1 and ye<=130:
      self.dia=2+(ye-1)*0.46
      self.cst=12.432*self.dia**2.0873
      self.cse=1.33521505975585 + 2.91436142467325*self.dia + 1.22482805681945*self.dia**2 - 0.128307442358041*self.dia**3 + 0.00621187374490005*self.dia**4 - 0.000136741754115665*self.dia**5 + 1.06726936205626E-06*self.dia**6 + 2.89107251476029E-09*self.dia**7 - 5.31681726060057E-11*self.dia**8
    self.r=self.dia/2

class northern_red_oak(tree):
  def __init__(self,x=0,y=0,fpindex=0,dia=0,cse=0,cst=0,burning=1,r=0,Color='b'):
    super().__init__(x,y,fpindex,dia,cse,cst,burning,r)
    self.procatch = (fpindex/200)
    self.x = x
    self.y = y
    self.Color='b'
  def calcstcse(self,ye):
    if ye==1:
      self.dia=2
      self.cst=5.0901*self.dia**2.4285
      self.cse=-1.24044318227646 + 16.5501964469107*self.dia -9.0252185310078*self.dia**2 + 2.34476988102222*self.dia**3 -0.296147122588268*self.dia**4 + 0.0213865453833021*self.dia**5  -0.000939679900610575*self.dia**6 +  2.55378447714475E-05*self.dia**7 -4.18661776931128E-07*self.dia**8 + 3.78668148032645E-09*self.dia**9  -1.44847040023226E-11*self.dia**10
    elif ye>1 and ye<=150:
      self.dia=2+(ye-1)*0.37
      self.cst=5.0901*self.dia**2.4285
      self.cse=-1.24044318227646 + 16.5501964469107*self.dia -9.0252185310078*self.dia**2 + 2.34476988102222*self.dia**3 -0.296147122588268*self.dia**4 + 0.0213865453833021*self.dia**5  -0.000939679900610575*self.dia**6 +  2.55378447714475E-05*self.dia**7 -4.18661776931128E-07*self.dia**8 + 3.78668148032645E-09*self.dia**9  -1.44847040023226E-11*self.dia**10
    self.r=self.dia/2

class notree(tree):
  def __init__(self,x=0,y=0,fpindex=0,dia=0,cse=0,cst=0,burning=0,ye=0,r=0,Color='w'):
    super().__init__(x,y,fpindex,dia,cse,cst,burning,r)
    self.procatch = 0
    self.x = x
    self.y = y
    self.Color='w'

#according to biodiversity and tree carbon storage in 100 years,list all the results for different tree species ratio
def treeratio(sumtree):#sumtree is the number of all the trees in the forest
  Treespruce=spruce_spp()
  Treeredmaple=red_maple()
  Treeeasterncottonwood=eastern_cottonwood()
  Treeamericanelm=american_elm()
  Treesilvermaple=silver_maple()
  Treenorthernredoak=northern_red_oak()
  com=product(range(1,sumtree+1),repeat=6)
  allresult=list(com)
  all=len(allresult)#all the combinations are put in the list allresult

  finalresult=[]
  for i in range(all):
    if sum(allresult[i])==sumtree:
      finalresult.append(allresult[i])

  Treespruce.calcstcse(100)#calculate tree carbon storage in 100 years
  Treeredmaple.calcstcse(100)
  Treeeasterncottonwood.calcstcse(100)
  Treeamericanelm.calcstcse(100)
  Treesilvermaple.calcstcse(100)
  Treenorthernredoak.calcstcse(100)
  X=[]
  Y=[]
  y=0
  final=len(finalresult)
  for i in range(final):
    a=finalresult[i][0]
    b=finalresult[i][1]
    c=finalresult[i][2]
    d=finalresult[i][3]
    e=finalresult[i][4]
    f=finalresult[i][5]
    x=Treespruce.cst*a+Treeredmaple.cst*b+Treeeasterncottonwood.cst*c+Treeamericanelm.cst*d+Treesilvermaple.cst*e+Treenorthernredoak.cst*f
    X.append(x)
    y=1/((a/sumtree)**2+(b/sumtree)**2+(c/sumtree)**2+(d/sumtree)**2+(e/sumtree)**2+(f/sumtree)**2)
    Y.append(y)
  df={'carbon':X,'Biodiversity':Y}
  dft=DataFrame(data=df)
  sns.scatterplot(data=dft, x='carbon', y='Biodiversity')

treeratio(20)

"""Class Forest"""

class setForest:
  def __init__(self):
    self.forestlist = []
    self.color=[]
    self.spruce_spplocation=[]
    self.red_maplelocation=[]
    self.silver_maplelocation=[]
    self.american_elmlocation=[]
    self.northern_red_oaklocation=[]
    self.eastern_cottonwoodlocation=[]
    self.notreelocation=[]
    self.cosum = []
    self.cosum_x=[]
    self.cosum_y=[]
    self.notree=[]
  def addtree(self,species):
    self.forestlist=self.forestlist+[species]
  def initialforest(self,SXYsum,SStep,Xsum,Ysum,a,b,c,d,e,f,g): #build the forest
    com=product(range(SXYsum,Xsum,SStep),range(SXYsum,Ysum,SStep))#SXYsum is the start point for x,y,there is notree on the edge,so the coordinates don't include Xsum.Ysum,a,b...f are the numbers for different kinds of tree species
    set1=set()
    for i in com:
      set1.add(i)

    set2=random.sample(set1,a) #different tree species has their own set
    set1=set1.difference(set2)
    set3=random.sample(set1,b)
    set1=set1.difference(set3)
    set4=random.sample(set1,c)
    set1=set1.difference(set4)
    set5=random.sample(set1,d)
    set1=set1.difference(set5)
    set6=random.sample(set1,e)
    set1=set1.difference(set6)
    set7=random.sample(set1,f)
    set1=set1.difference(set7)


    for x,y in set1:
      spruce_spp.x=x
      spruce_spp.y=y
      spruce_spp.fpindex=45
      spruce_spp.burning=1
      spruce_spp.Color='g'
      co1=[x,y]
      self.spruce_spplocation.append(co1)
      self.addtree(spruce_spp)
      self.color.append('g')

    for x,y in set2:
      red_maple.x=x
      red_maple.y=y
      red_maple.fpindex=35
      red_maple.burning=1
      red_maple.Color='r'
      co2=[x,y]
      self.red_maplelocation.append(co2)
      self.addtree(red_maple)
      self.color.append('r')

    for x,y in set3:
      eastern_cottonwood.x=x
      eastern_cottonwood.y=y
      eastern_cottonwood.fpindex=115
      eastern_cottonwood.burning=1
      eastern_cottonwood.Color='y'
      co3=[x,y]
      self.eastern_cottonwoodlocation.append(co3)
      self.addtree(eastern_cottonwood)
      self.color.append('y')

    for x,y in set4:
      american_elm.x=x
      american_elm.y=y
      american_elm.fpindex=70
      american_elm.burning=1
      american_elm.Color='m'
      co4=[x,y]
      self.american_elmlocation.append(co4)
      self.addtree(american_elm)
      self.color.append('m')

    for x,y in set5:
      silver_maple.x=x
      silver_maple.y=y
      silver_maple.fpindex=35
      silver_maple.burning=1
      silver_maple.Color='c'
      co5=[x,y]
      self.silver_maplelocation.append(co5)
      self.addtree(silver_maple)
      self.color.append('c')

    for x,y in set6:
      northern_red_oak.x=x
      northern_red_oak.y=y
      northern_red_oak.fpindex=100
      northern_red_oak.burning=1
      northern_red_oak.Color='b'
      co6=[x,y]
      self.northern_red_oaklocation.append(co6)
      self.addtree(northern_red_oak)
      self.color.append('b')

    for x,y in set7:
      notree.x=x
      notree.y=y
      notree.fpindex=0
      notree.burning=0
      notree.Color='w'
      co7=[x,y]
      self.notreelocation.append(co7)
      self.notree.append(notree)
      self.addtree(notree)
      self.color.append('w')
    self.cosum = self.spruce_spplocation + self.red_maplelocation + self.eastern_cottonwoodlocation  + self.american_elmlocation + self.silver_maplelocation + self.northern_red_oaklocation + self.notreelocation

    for i in self.cosum:
      self.cosum_x.append(i[0])
      self.cosum_y.append(i[1])

  #Fire Related Methods
  #randomly choose a point to start the fire
  def treegetfire(self):
    newforestlist=[i for i in self.forestlist if i not in self.notree] #notreelocation is impossible to catch fire
    firetree=random.choice(newforestlist)
    Xgetfire=firetree.x
    Ygetfire=firetree.y
    firetreeindex=firetree.fpindex
    return [Xgetfire,Ygetfire,firetreeindex]

  #one method to determine if a point will get burned
  def fire_index_percentage(self,index_x,index_y):
    if [index_x,index_y] in self.spruce_spplocation:
     Tree_index=spruce_spp.fpindex
    elif [index_x,index_y] in self.red_maplelocation:
     Tree_index=red_maple.fpindex
    elif [index_x,index_y] in self.silver_maplelocation:
     Tree_index=silver_maple.fpindex
    elif [index_x,index_y] in self.eastern_cottonwoodlocation:
     Tree_index=eastern_cottonwood.fpindex
    elif [index_x,index_y] in self.american_elmlocation:
     Tree_index=american_elm.fpindex
    elif [index_x,index_y] in self.northern_red_oaklocation:
     Tree_index=northern_red_oak.fpindex
    elif [index_x,index_y] in self.notreelocation:
     Tree_index=0

    percentage = random.random()

    if Tree_index > percentage == True:
      val = True
    else:
      val = False

    return val


  #another method to determine if a point will get burned
  def fire_index_distance(self,s_index_x,s_index_y,index_x,index_y,msumxy): #s_index is the index where the fire starts (ignition point) index_x is the index where the condition will check viability for fire spread，msumxy==Xsum-1

    global Tree_index
    global Tree_index_2
    global val
    if 0 < index_x <= msumxy and 0 < index_y<=msumxy:


      if [s_index_x,s_index_y] in self.spruce_spplocation:
       Tree_index_2=spruce_spp.fpindex
      elif [s_index_x,s_index_y] in self.red_maplelocation:
       Tree_index_2=red_maple.fpindex
      elif [s_index_x,s_index_y] in self.silver_maplelocation:
       Tree_index_2=silver_maple.fpindex
      elif [s_index_x,s_index_y] in self.eastern_cottonwoodlocation:
       Tree_index_2=eastern_cottonwood.fpindex
      elif [s_index_x,s_index_y] in self.american_elmlocation:
       Tree_index_2=american_elm.fpindex
      elif [s_index_x,s_index_y] in self.northern_red_oaklocation:
       Tree_index_2=northern_red_oak.fpindex
      elif [s_index_x,s_index_y] in self.notreelocation:
       Tree_index_2=0

      if [index_x,index_y] in self.spruce_spplocation:
       Tree_index=spruce_spp.fpindex
      elif [index_x,index_y] in self.red_maplelocation:
       Tree_index=red_maple.fpindex
      elif [index_x,index_y] in self.silver_maplelocation:
       Tree_index=silver_maple.fpindex
      elif [index_x,index_y] in self.eastern_cottonwoodlocation:
       Tree_index=eastern_cottonwood.fpindex
      elif [index_x,index_y] in self.american_elmlocation:
       Tree_index=american_elm.fpindex
      elif [index_x,index_y] in self.northern_red_oaklocation:
       Tree_index=northern_red_oak.fpindex
      elif [index_x,index_y] in self.notreelocation:
       Tree_index=0

      sp_decay_x = msumxy**2 / (1.0 + math.exp((-1)*(Tree_index_2 / 200.0)*(s_index_x)))
      sp_decay_y = msumxy**2 / (1.0 + math.exp((-1)*(Tree_index_2 / 200.0)*(s_index_y)))


      if( sp_decay_x <= (msumxy**2 / (1.0 + math.exp((-1)*(Tree_index / 200.0)*(s_index_x + abs(s_index_x-index_x))))) and
          sp_decay_y <= (msumxy**2 / (1.0 + math.exp((-1)*(Tree_index / 200.0)*(abs(s_index_y + s_index_y-index_y)) )) )  ):

          val = True
      else:
        val=False

      return val
  #if the point will get burned, there are some operations for that point
  def fire_spreading(self,ix,iy,sssum,ssstep):#sssum==Xsum,ssstep==sstep
    dx = ssstep
    dy = ssstep
    lmsumxy=sssum-1
    if 0 < ix+dx < sssum and 0 < iy+dx < sssum:
      if self.fire_index_distance(ix,iy,ix+dx,iy,lmsumxy)== True:
        neighbor1listindex=self.cosum.index([ix+dx,iy])
        if [ix+dx,iy] not in self.notreelocation:

          self.notreelocation.append([ix+dx,iy])

          self.forestlist[neighbor1listindex]=notree


      elif self.fire_index_distance(ix,iy,ix,iy+dy,lmsumxy)== True:
        neighbor1listindex=self.cosum.index([ix,iy+dy])
        if [ix,iy+dy] not in self.notreelocation:

          self.notreelocation.append([ix,iy+dy])

          self.forestlist[neighbor1listindex]=notree


      elif self.fire_index_distance(ix,iy,ix+dx,iy+dy,lmsumxy) == True:
        neighbor1listindex=self.cosum.index([ix+dx,iy+dy])
        if [ix+dx,iy+dy] not in self.notreelocation:

          self.notreelocation.append([ix+dx,iy+dy])

          self.forestlist[neighbor1listindex]=notree


      elif self.fire_index_distance(ix,iy,ix-dx,iy,lmsumxy) == True:
        neighbor1listindex=self.cosum.index([ix-dx,iy])
        if [ix-dx,iy] not in self.notreelocation:

          self.notreelocation.append([ix-dx,iy])

          self.forestlist[neighbor1listindex]=notree


      elif self.fire_index_distance(ix,iy,ix,iy-dy,lmsumxy) == True:
        neighbor1listindex=self.cosum.index([ix,iy-dy])
        if [ix,iy-dy] not in self.notreelocation:

          self.notreelocation.append([ix,iy-dy])

          self.forestlist[neighbor1listindex]=notree


      elif self.fire_index_distance(ix,iy,ix-dx,iy-dy,lmsumxy) == True:
        neighbor1listindex=self.cosum.index([ix-dx,iy-dy])
        if [ix-dx,iy-dy] not in self.notreelocation:

          self.notreelocation.append([ix-dx,iy-dy])

          self.forestlist[neighbor1listindex]=notree



      elif self.fire_index_distance(ix,iy,ix-dx,iy+dy,lmsumxy) == True:
        neighbor1listindex=self.cosum.index([ix-dx,iy+dy])
        if [ix-dx,iy+dy] not in self.notreelocation:

          self.notreelocation.append([ix-dx,iy+dy])

          self.forestlist[neighbor1listindex]=notree



      elif self.fire_index_distance(ix,iy,ix+dx,iy-dy,lmsumxy) == True:
        neighbor1listindex=self.cosum.index([ix+dx,iy-dy])
        if [ix+dx,iy-dy] not in self.notreelocation:

          self.notreelocation.append([ix+dx,iy-dy])
          self.forestlist[neighbor1listindex]=notree


  #check the surrounding points until reach the edge of the forest
  def scanning(self,ix,iy,newSXYsum,newmsumxy,newstep):#newstep==ssstep,newmsumxy==msumxy==xsum-1，newSXYsum==SXYsum
    a=ix
    b=iy
    newsssum=newmsumxy+1
    for i in range(ix,newmsumxy,newstep):
      ix=ix+newstep
      self.fire_spreading(ix,iy,newsssum,newstep)
    ix=a
    for i in range(newSXYsum,ix,newstep):
      ix=ix-newstep
      self.fire_spreading(ix,iy,newsssum,newstep)
    ix=a
    for i in range(iy,newmsumxy,newstep):
      iy=iy+newstep
      self.fire_spreading(ix,iy,newsssum,newstep)
    iy=b
    for i in range(newSXYsum,iy,newstep):
      iy=iy-newstep
      self.fire_spreading(ix,iy,newsssum,newstep)
    iy=b
    while newSXYsum < ix < newmsumxy and newSXYsum < iy < newmsumxy:
      ix=ix+newstep
      iy=iy+newstep
      self.fire_spreading(ix,iy,newsssum,newstep)
    ix=a
    iy=b
    while newSXYsum < ix < newmsumxy and newSXYsum < iy < newmsumxy:
      ix=ix-newstep
      iy=iy+newstep
      self.fire_spreading(ix,iy,newsssum,newstep)
    ix=a
    iy=b
    while newSXYsum < ix < newmsumxy and newSXYsum < iy < newmsumxy:
      ix=ix-newstep
      iy=iy-newstep
      self.fire_spreading(ix,iy,newsssum,newstep)
    ix=a
    iy=b
    while newSXYsum < ix < newmsumxy and newSXYsum < iy < newmsumxy:
      ix=ix+newstep
      iy=iy-newstep
      self.fire_spreading(ix,iy,newsssum,newstep)
    ix=a
    iy=b
    self.fire_spreading(ix,iy,newsssum,newstep)
    Newcosum=[i for i in self.cosum if i not in self.notreelocation]#remaining trees coordinates
    NewNewforestlist=[i for i in self.forestlist if i != notree]#remaining trees objects
    return [Newcosum,NewNewforestlist,self.spruce_spplocation,self.red_maplelocation,self.silver_maplelocation,self.eastern_cottonwoodlocation,self.american_elmlocation,self.northern_red_oaklocation]

# Commented out IPython magic to ensure Python compatibility.
#plot forest plan
def plant(X,Y):

  bottom=np.zeros_like(X)
#   %matplotlib inline
  plt.style.use('ggplot')
  plt.plot(X,Y,marker='.',linestyle = 'none')
  plt.plot()

"""carbon calculation method(after fire)"""

def carbonCSTCSEafterfire(afterfireforestlist,sp,re,si,ea,am,nor):#afterforestlist is remaining trees coordinates list(newcosum)
  sumx=[]
  sumy=[]
  sumcolor=[]
  CST=[]
  CSE=[]
  R=[]
  LL=len(afterfireforestlist)

  for i in range(LL):
    sumx.append(afterfireforestlist[i][0])

    sumy.append(afterfireforestlist[i][1])


  year=range(1,102,10)
  for ye in year:#every ten years
    CST.clear()
    R.clear()
    CSE.clear()
    sumcolor.clear()
    for i in range(LL):
      if afterfireforestlist[i] in sp:
        Tree=spruce_spp(afterfireforestlist[i][0],afterfireforestlist[i][1],45,dia=0,cse=0,cst=0,burning=1,r=0,Color='g')
        Tree.calcstcse(ye)
        R.append(Tree.r)
        CST.append(Tree.cst)
        CSE.append(Tree.cse)
        sumcolor.append('g')
      elif afterfireforestlist[i] in re:
        Tree=red_maple(afterfireforestlist[i][0],afterfireforestlist[i][1],35,dia=0,cse=0,cst=0,burning=1,r=0,Color='r')
        Tree.calcstcse(ye)
        R.append(Tree.r)
        CST.append(Tree.cst)
        CSE.append(Tree.cse)
        sumcolor.append('r')
      elif afterfireforestlist[i] in si:
        Tree=silver_maple(afterfireforestlist[i][0],afterfireforestlist[i][1],35,dia=0,cse=0,cst=0,burning=1,r=0,Color='c')
        Tree.calcstcse(ye)
        R.append(Tree.r)
        CST.append(Tree.cst)
        CSE.append(Tree.cse)
        sumcolor.append('c')
      elif afterfireforestlist[i] in ea:
        Tree=eastern_cottonwood(afterfireforestlist[i][0],afterfireforestlist[i][1],115,dia=0,cse=0,cst=0,burning=1,r=0,Color='y')
        Tree.calcstcse(ye)
        R.append(Tree.r)
        CST.append(Tree.cst)
        CSE.append(Tree.cse)
        sumcolor.append('y')
      elif afterfireforestlist[i] in am:
        Tree=american_elm(afterfireforestlist[i][0],afterfireforestlist[i][1],70,dia=0,cse=0,cst=0,burning=1,r=0,Color='m')
        Tree.calcstcse(ye)
        R.append(Tree.r)
        CST.append(Tree.cst)
        CSE.append(Tree.cse)
        sumcolor.append('m')
      elif afterfireforestlist[i] in nor:
        Tree=northern_red_oak(afterfireforestlist[i][0],afterfireforestlist[i][1],100,dia=0,cse=0,cst=0,burning=1,r=0,Color='b')
        Tree.calcstcse(ye)
        R.append(Tree.r)
        CST.append(Tree.cst)
        CSE.append(Tree.cse)
        sumcolor.append('b')



    print(ye)
    plot_3D_cylinder(radius=R, height=CST, elevation=0, resolution=10, color=sumcolor, x_center=sumx, y_center=sumy,sumS=LL)
    print(CST)
    print(sum(CST))
    plot_3D_cylinder2(radius=R, height=CSE, elevation=0, resolution=10, color=sumcolor, x_center=sumx, y_center=sumy,sumS=LL)
    print(CSE)
    print(sum(CSE))

#carbon storage cylinder
def plot_3D_cylinder(radius=1, height=1, elevation=0, resolution=10, color='r', x_center = 0, y_center = 0,sumS=36):
    fig=plt.figure()
    ax = Axes3D(fig, azim=20, elev=20)
    ax.set_zlim(top=100000)
    for item in range(sumS):
      x = np.linspace(x_center[item]-radius[item], x_center[item]+radius[item], resolution)
      z = np.linspace(elevation, elevation+height[item], resolution)
      X, Z = np.meshgrid(x, z)

      Y = np.sqrt(radius[item]**2 - (X - x_center[item])**2) + y_center[item]

      ax.plot_surface(X, Y, Z, linewidth=0, color=color[item])
      ax.plot_surface(X, (2*y_center[item]-Y), Z, linewidth=0, color=color[item])

      floor = Circle((x_center[item], y_center[item]), radius[item], color=color[item])
      ax.add_patch(floor)
      art3d.pathpatch_2d_to_3d(floor, z=elevation, zdir="z")

      ceiling = Circle((x_center[item], y_center[item]), radius[item], color=color[item])
      ax.add_patch(ceiling)
      art3d.pathpatch_2d_to_3d(ceiling, z=elevation+height[item], zdir="z")

    ax.set_xlabel('x-axis')
    ax.set_ylabel('y-axis')
    ax.set_zlabel('z-axis')

    plt.show()
    plt.savefig("Save Plot as PDF file using savefig.pdf")

#carbon sequestration cylinder
def plot_3D_cylinder2(radius=1, height=1, elevation=0, resolution=10, color='r', x_center = 0, y_center = 0,sumS=36):
    fig=plt.figure()
    ax = Axes3D(fig, azim=20, elev=20)
    ax.set_zlim(top=800)
    for item in range(sumS):
      x = np.linspace(x_center[item]-radius[item], x_center[item]+radius[item], resolution)
      z = np.linspace(elevation, elevation+height[item], resolution)
      X, Z = np.meshgrid(x, z)

      Y = np.sqrt(radius[item]**2 - (X - x_center[item])**2) + y_center[item]

      ax.plot_surface(X, Y, Z, linewidth=0, color=color[item])
      ax.plot_surface(X, (2*y_center[item]-Y), Z, linewidth=0, color=color[item])

      floor = Circle((x_center[item], y_center[item]), radius[item], color=color[item])
      ax.add_patch(floor)
      art3d.pathpatch_2d_to_3d(floor, z=elevation, zdir="z")

      ceiling = Circle((x_center[item], y_center[item]), radius[item], color=color[item])
      ax.add_patch(ceiling)
      art3d.pathpatch_2d_to_3d(ceiling, z=elevation+height[item], zdir="z")

    ax.set_xlabel('x-axis')
    ax.set_ylabel('y-axis')
    ax.set_zlabel('z-axis')

    plt.show()
    plt.savefig("Save Plot as PDF file using savefig.pdf")

forest1 = setForest()
forest1.initialforest(100,100,700,700,4,6,6,4,5,5,6)
originallist=[i for i in forest1.cosum if i not in forest1.notreelocation]#before fire simulation the original trees in the forest
start=forest1.treegetfire()#fire simulation start(choose a start point to get burned)
print (start)#start point coordinate and the tree's fpindex
zsum=forest1.scanning(start[0],start[1],100,600,100)


sumO=zsum[0]#all the remaining trees'coordinates

sumW=zsum[1]#all the remaining trees'objects
print(len(sumO))
print(len(sumW))#has the same length with len(sumO)
OL=len(originallist)
Ox=[]
Oy=[]
for i in range(OL):
  Ox.append(originallist[i][0])
  Oy.append(originallist[i][1])
plant(Ox,Oy)#the original forest before fire simulation

carbonCSTCSEafterfire(originallist,zsum[2],zsum[3],zsum[4],zsum[5],zsum[6],zsum[7])#if there is no fire,the calculation of the carbon in the original forest within 100 years
carbonCSTCSEafterfire(sumO,zsum[2],zsum[3],zsum[4],zsum[5],zsum[6],zsum[7])#the result is different every time we run the codes because the start point is different every time(randomly choose a point to start the fire)
L=len(sumO)
xx=[]
yy=[]
for i in range(L):
  xx.append(sumO[i][0])
  yy.append(sumO[i][1])
plant(xx,yy)#the forest after fire simulation